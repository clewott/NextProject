// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                 Int     @id @default(autoincrement())
  userId             Int  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields:[userId], references:[id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int     @id @default(autoincrement())
  sessionToken String   @unique@map("session_token")
  userId       Int   @map("user_id")
  expires      DateTime
  user         User     @relation(fields:[userId], references:[id], onDelete: Cascade)
}

model User {
  id            Int      @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  events        Event[]
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Event {
  id           Int           @id @default(autoincrement())
  name         String
  participants Participant[]
  enabled      Boolean       @default(false)
  admin        User          @relation(fields: [adminId], references: [id])
  adminId      Int
}

model Participant {
  id      Int    @id @default(autoincrement())
  name    String
  email   String
  gifts   Gift[]
  Event   Event? @relation(fields: [eventId], references: [id])
  eventId Int?
}

model Gift {
  id            Int          @id @default(autoincrement())
  link          String
  Participant   Participant? @relation(fields: [participantId], references: [id])
  participantId Int?
}
